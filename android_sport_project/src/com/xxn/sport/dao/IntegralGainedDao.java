package com.xxn.sport.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xxn.sport.entities.IntegralGained;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INTEGRAL_GAINED".
*/
public class IntegralGainedDao extends AbstractDao<IntegralGained, Void> {

    public static final String TABLENAME = "INTEGRAL_GAINED";

    /**
     * Properties of entity IntegralGained.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", false, "UID");
        public final static Property UseId = new Property(1, String.class, "useId", false, "USE_ID");
        public final static Property GainTime = new Property(2, String.class, "gainTime", false, "GAIN_TIME");
        public final static Property Integral = new Property(3, Integer.class, "integral", false, "INTEGRAL");
        public final static Property GainReason = new Property(4, Integer.class, "gainReason", false, "GAIN_REASON");
    };


    public IntegralGainedDao(DaoConfig config) {
        super(config);
    }
    
    public IntegralGainedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INTEGRAL_GAINED\" (" + //
                "\"UID\" TEXT UNIQUE ," + // 0: uid
                "\"USE_ID\" TEXT," + // 1: useId
                "\"GAIN_TIME\" TEXT," + // 2: gainTime
                "\"INTEGRAL\" INTEGER," + // 3: integral
                "\"GAIN_REASON\" INTEGER);"); // 4: gainReason
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INTEGRAL_GAINED\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IntegralGained entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String useId = entity.getUseId();
        if (useId != null) {
            stmt.bindString(2, useId);
        }
 
        String gainTime = entity.getGainTime();
        if (gainTime != null) {
            stmt.bindString(3, gainTime);
        }
 
        Integer integral = entity.getIntegral();
        if (integral != null) {
            stmt.bindLong(4, integral);
        }
 
        Integer gainReason = entity.getGainReason();
        if (gainReason != null) {
            stmt.bindLong(5, gainReason);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public IntegralGained readEntity(Cursor cursor, int offset) {
        IntegralGained entity = new IntegralGained( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // useId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gainTime
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // integral
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // gainReason
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IntegralGained entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUseId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGainTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIntegral(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setGainReason(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(IntegralGained entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(IntegralGained entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
