package com.xxn.sport.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xxn.sport.entities.SportRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPORT_RECORD".
*/
public class SportRecordDao extends AbstractDao<SportRecord, Void> {

    public static final String TABLENAME = "SPORT_RECORD";

    /**
     * Properties of entity SportRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", false, "UID");
        public final static Property UserID = new Property(1, String.class, "userID", false, "USER_ID");
        public final static Property SportType = new Property(2, Integer.class, "sportType", false, "SPORT_TYPE");
        public final static Property StartTime = new Property(3, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, String.class, "endTime", false, "END_TIME");
        public final static Property PauseTime = new Property(5, Integer.class, "pauseTime", false, "PAUSE_TIME");
        public final static Property MotionTrack = new Property(6, String.class, "motionTrack", false, "MOTION_TRACK");
        public final static Property Distance = new Property(7, Float.class, "distance", false, "DISTANCE");
    };


    public SportRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SportRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPORT_RECORD\" (" + //
                "\"UID\" TEXT UNIQUE ," + // 0: uid
                "\"USER_ID\" TEXT," + // 1: userID
                "\"SPORT_TYPE\" INTEGER," + // 2: sportType
                "\"START_TIME\" TEXT," + // 3: startTime
                "\"END_TIME\" TEXT," + // 4: endTime
                "\"PAUSE_TIME\" INTEGER," + // 5: pauseTime
                "\"MOTION_TRACK\" TEXT," + // 6: motionTrack
                "\"DISTANCE\" REAL);"); // 7: distance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPORT_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SportRecord entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }
 
        Integer sportType = entity.getSportType();
        if (sportType != null) {
            stmt.bindLong(3, sportType);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(4, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(5, endTime);
        }
 
        Integer pauseTime = entity.getPauseTime();
        if (pauseTime != null) {
            stmt.bindLong(6, pauseTime);
        }
 
        String motionTrack = entity.getMotionTrack();
        if (motionTrack != null) {
            stmt.bindString(7, motionTrack);
        }
 
        Float distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(8, distance);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SportRecord readEntity(Cursor cursor, int offset) {
        SportRecord entity = new SportRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sportType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pauseTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // motionTrack
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7) // distance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SportRecord entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSportType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPauseTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMotionTrack(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDistance(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SportRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SportRecord entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
